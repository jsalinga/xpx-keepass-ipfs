/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.teamclark.proximax.keypass;

import io.nem.xpx.builder.TransferTransactionBuilder;
import io.nem.xpx.exceptions.ApiException;
import io.nem.xpx.exceptions.InsufficientAmountException;
import io.nem.xpx.facade.connection.LocalHttpPeerConnection;
import io.nem.xpx.facade.connection.PeerConnection;
import io.nem.xpx.facade.upload.Upload;
import io.nem.xpx.facade.upload.UploadException;
import io.nem.xpx.facade.upload.UploadFileParameter;
import io.nem.xpx.facade.upload.UploadResult;
import io.nem.xpx.factory.ConnectionFactory;
import io.nem.xpx.model.GeneratedAccount;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URISyntaxException;
import java.util.ArrayList;
import static java.util.Collections.singletonMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.nem.core.crypto.KeyPair;
import org.nem.core.crypto.PrivateKey;
import org.nem.core.crypto.PublicKey;
import org.nem.core.model.Account;
import org.nem.core.model.Address;
import org.nem.core.model.TransferTransaction;
import org.nem.core.model.mosaic.Mosaic;
import org.nem.core.model.mosaic.MosaicId;
import org.nem.core.model.namespace.NamespaceId;
import org.nem.core.model.primitive.Amount;
import org.nem.core.model.primitive.Quantity;

/**
 *
 * @author jsalinga
 */
public class CreateNewAddress extends javax.swing.JDialog {

    private PeerConnection peerConnection;
    private final CardLayout cards;
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    private ArrayList xpx_keepass_record;
    private String nemHash;

    /**
     * Creates new form CreateNewAddress
     *
     * @param parent
     * @param modal
     */
    public CreateNewAddress(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });

        cards = (CardLayout) pnlCards.getLayout();
        int height = (int) (parent.getSize().height - (parent.getSize().height * .25));
        int width = (int) (parent.getSize().width - (parent.getSize().width * .25));
        setSize(width, height);
        setLocationRelativeTo(parent);
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCards = new javax.swing.JPanel();
        pnlCreateNemAddress = new javax.swing.JPanel();
        btnStart = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        pnlNewNemAccount = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblNewNem = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblPublicKey = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblPrivateKey = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnNemAccountCreated = new javax.swing.JButton();
        pnlKeePass = new javax.swing.JPanel();
        keepassGroup1 = new com.teamclark.proximax.keypass.KeepassGroup();
        jButton1 = new javax.swing.JButton();

        setTitle("Create new account");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        pnlCards.setLayout(new java.awt.CardLayout());

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<html>Before we begin, please make sure that IPFS Daemon is properly installed and running.<br><br>Click <b>Start</b> button when ready...");

        javax.swing.GroupLayout pnlCreateNemAddressLayout = new javax.swing.GroupLayout(pnlCreateNemAddress);
        pnlCreateNemAddress.setLayout(pnlCreateNemAddressLayout);
        pnlCreateNemAddressLayout.setHorizontalGroup(
            pnlCreateNemAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCreateNemAddressLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCreateNemAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCreateNemAddressLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnStart))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlCreateNemAddressLayout.setVerticalGroup(
            pnlCreateNemAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCreateNemAddressLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStart)
                .addContainerGap())
        );

        pnlCards.add(pnlCreateNemAddress, "home");

        pnlNewNemAccount.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("New NEM Address");

        jLabel4.setText("Public Key");

        jLabel6.setText("Private Key");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("<html>New NEM address succefully created. Clicking \"Next\" button will attempt to send 500 XEMs to newly created account...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 578, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator1)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel4)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblPrivateKey, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                                .addComponent(lblPublicKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNewNem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 453, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(lblNewNem))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(lblPublicKey))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(lblPrivateKey))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                    .addGap(47, 47, 47)))
        );

        pnlNewNemAccount.add(jPanel1, java.awt.BorderLayout.CENTER);

        btnNemAccountCreated.setText("Next >>");
        btnNemAccountCreated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNemAccountCreatedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNemAccountCreated)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNemAccountCreated)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlNewNemAccount.add(jPanel2, java.awt.BorderLayout.SOUTH);

        pnlCards.add(pnlNewNemAccount, "newnemaccount");

        jButton1.setText("Next");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlKeePassLayout = new javax.swing.GroupLayout(pnlKeePass);
        pnlKeePass.setLayout(pnlKeePassLayout);
        pnlKeePassLayout.setHorizontalGroup(
            pnlKeePassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(keepassGroup1, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlKeePassLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        pnlKeePassLayout.setVerticalGroup(
            pnlKeePassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlKeePassLayout.createSequentialGroup()
                .addComponent(keepassGroup1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pnlCards.add(pnlKeePass, "card4");

        getContentPane().add(pnlCards, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        if (peerConnection == null) {
            try {
                peerConnection = new LocalHttpPeerConnection(
                        ConnectionFactory.createNemNodeConnection("testnet", "http", "104.128.226.60", 7890),
                        ConnectionFactory.createIPFSNodeConnection("/ip4/127.0.0.1/tcp/5001"));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "<html>An error occured "
                        + "while executing <font color='red'><b>LocalHttpPeerConnection</b>"
                        + "</font color><br><br><b>" + e.getMessage());
            }
        }
        if (peerConnection != null) {
            try {
                GeneratedAccount ga = peerConnection.getNemAccountApi().generateAccount();
                String nemAddress = ga.getEncodedAddress();
                String publicKey = ga.getEncodedPublicKey();
                String privateKey = ga.getEncodedPrivateKey();
                lblNewNem.setText(nemAddress);
                lblPublicKey.setText(publicKey);
                lblPrivateKey.setText(privateKey);

                // sending 100 XPX
                Mosaic xpxMosaic = new Mosaic(new MosaicId(new NamespaceId("prx"), "xpx"),
                        Quantity.fromValue(1000000));
                System.out.println("Mozaic ID: " + xpxMosaic.getMosaicId());
                System.out.println("Public Key: " + publicKey);

                // send 500 XEMs
                final TransferTransaction transferTransaction
                        = new TransferTransactionBuilder(peerConnection.getTransactionFeeCalculators())
                        .sender(new Account(new KeyPair(PrivateKey.fromHexString("deaae199f8e511ec51eb0046cf8d78dc481e20a340d003bbfcc3a66623d09763"))))
                        .recipient(new Account(Address.fromPublicKey(PublicKey.fromHexString(publicKey))))
                        .version(2)
                        .amount(Amount.fromNem(1l))
                        .addMosaic(xpxMosaic).buildAndSignTransaction();

                // Announce
                peerConnection.getTransactionSender().sendTransferTransaction(transferTransaction);
                // THEN SEND XEMS
                //send 500 XEMs
                final TransferTransaction transferTransactionXems
                        = new TransferTransactionBuilder(peerConnection.getTransactionFeeCalculators())
                        .sender(new Account(new KeyPair(PrivateKey.fromHexString("deaae199f8e511ec51eb0046cf8d78dc481e20a340d003bbfcc3a66623d09763"))))
                        .recipient(new Account(Address.fromPublicKey(PublicKey.fromHexString(publicKey))))
                        .version(2)
                        .amount(Amount.fromNem(500l))
                        .addMosaic(xpxMosaic).buildAndSignTransaction();
                // Announce
                peerConnection.getTransactionSender().sendTransferTransaction(transferTransactionXems);

                cards.next(pnlCards);
            } catch (ApiException | InterruptedException | ExecutionException | InsufficientAmountException ex) {
                Logger.getLogger(CreateNewAddress.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnNemAccountCreatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNemAccountCreatedActionPerformed
        this.xpx_keepass_record = new ArrayList();
        this.xpx_keepass_record.add(lblNewNem.getText());
        this.xpx_keepass_record.add(lblPrivateKey.getText());
        this.xpx_keepass_record.add(lblPublicKey.getText());

        try {
            //	send 500 XEMs
            final TransferTransaction transferTransactionXems = new TransferTransactionBuilder(peerConnection.getTransactionFeeCalculators())
                    .sender(new Account(new KeyPair(PrivateKey.fromHexString("deaae199f8e511ec51eb0046cf8d78dc481e20a340d003bbfcc3a66623d09763"))))
                    .recipient(new Account(Address.fromPublicKey(PublicKey.fromHexString(lblPublicKey.getText()))))
                    .version(2)
                    .amount(Amount.fromNem(500l))
                    .buildAndSignTransaction();
            //	Announce
            peerConnection.getTransactionSender().sendTransferTransaction(transferTransactionXems);

            //	100 XPX
            Mosaic xpxMosaic = new Mosaic(new MosaicId(new NamespaceId("prx"), "xpx"),
                    Quantity.fromValue(1000000));

            // SEND 100 XPX Only (1 XEM is multiplier)
            final TransferTransaction transferTransactionXpx = new TransferTransactionBuilder(peerConnection.getTransactionFeeCalculators())
                    .sender(new Account(new KeyPair(PrivateKey.fromHexString("deaae199f8e511ec51eb0046cf8d78dc481e20a340d003bbfcc3a66623d09763"))))
                    .recipient(new Account(Address.fromPublicKey(PublicKey.fromHexString(lblPublicKey.getText()))))
                    .version(2)
                    .amount(Amount.fromNem(1l))
                    .addMosaics(xpxMosaic).buildAndSignTransaction();

            //	Announce
            peerConnection.getTransactionSender().sendTransferTransaction(transferTransactionXpx);
            cards.next(pnlCards);
        } catch (ApiException | InterruptedException | ExecutionException | InsufficientAmountException ex) {
            JOptionPane.showMessageDialog(rootPane, "<html>An error occured "
                    + "while trying to send <font color='red'><b>500 XEMs</b>"
                    + "</font color><br><br><b>" + ex.getMessage());
        }
    }//GEN-LAST:event_btnNemAccountCreatedActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        boolean isKDBXCreated = keepassGroup1.isDatabaseCreated();
        if (isKDBXCreated) {
            int ans = JOptionPane.showConfirmDialog(rootPane,
                    "<html>We successfully created <b>KeePass Database</b>.<br>"
                    + "<br>The next step will attempt to perform "
                    + "<b>Uploading of KeePass Database using NEM Privacy Strategy</b> "
                    + "<br><br>Click \"Ok\" button to proceed",
                    "Confirm", JOptionPane.OK_CANCEL_OPTION
            );
            if (ans == JOptionPane.OK_OPTION) {
                String kdbx = keepassGroup1.getKdbx();
                Upload upload = new Upload(peerConnection);
                File file = new File("tmp" + File.separator + kdbx);
                byte[] b = new byte[(int) file.length()];

                try {
                    JSONParser parser = new JSONParser();
                    File f = new File(getClass().getResource("/com/teamclark/proximax/keypass/configs/uploadBinary.json").toURI());
                    FileReader fr = new FileReader(f);
                    Object fileObj = parser.parse((Reader) fr);

                    String name, keywords, key, value;
                    Map<String, String> metadata;

                    JSONObject object = (JSONObject) fileObj;
                    name = (String) object.get("name");
                    keywords = (String) object.get("keywords");
                    JSONObject meta = (JSONObject) object.get("metadata");
                    key = meta.keySet().iterator().next().toString();
                    value = (String) meta.get(key);
                    metadata = singletonMap(key, value);

                    UploadFileParameter parameter = UploadFileParameter.create()
                            .senderPrivateKey(lblPrivateKey.getText())
                            .receiverPublicKey(lblPublicKey.getText())
                            .file(file)
                            .securedWithNemKeysPrivacyStrategy()
                            .build();

                    UploadResult uploadResult = upload.uploadFile(parameter);
                    String ipfsHash = uploadResult.getIpfsHash();
                    nemHash = uploadResult.getNemHash();
                    System.out.println("IPFS Hash: " + ipfsHash);
                    System.out.println("NEM Hash: " + nemHash);

                    /*
                    UploadBinaryParameter parameter = UploadBinaryParameter.create()
                            .senderPrivateKey(lblPrivateKey.getText())
                            .receiverPublicKey(lblPublicKey.getText())
                            .data(Files.readAllBytes(file.toPath()))
                            .keywords(keywords)
                            .metadata(metadata)
                            .contentType(Files.probeContentType(file.getAbsoluteFile().toPath()))
                            .name(name)
                            .securedWithPasswordPrivacyStrategy(lblPrivateKey.getText())
                            .build();
                    final UploadResult uploadResult = upload.uploadBinary(parameter);
                     */
                    this.nemHash = uploadResult.getNemHash();
                    this.xpx_keepass_record.add(this.nemHash);

                    doClose(RET_OK);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(CreateNewAddress.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException | UploadException | URISyntaxException | ParseException ex) {
                    Logger.getLogger(CreateNewAddress.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    public ArrayList getXpxKeepassRecord() {
        return this.xpx_keepass_record;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNemAccountCreated;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private com.teamclark.proximax.keypass.KeepassGroup keepassGroup1;
    private javax.swing.JLabel lblNewNem;
    private javax.swing.JLabel lblPrivateKey;
    private javax.swing.JLabel lblPublicKey;
    private javax.swing.JPanel pnlCards;
    private javax.swing.JPanel pnlCreateNemAddress;
    private javax.swing.JPanel pnlKeePass;
    private javax.swing.JPanel pnlNewNemAccount;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
}
