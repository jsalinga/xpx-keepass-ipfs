/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.teamclark.proximax.keypass;

import de.slackspace.openkeepass.KeePassDatabase;
import de.slackspace.openkeepass.domain.Entry;
import de.slackspace.openkeepass.domain.KeePassFile;
import io.nem.xpx.facade.connection.LocalHttpPeerConnection;
import io.nem.xpx.facade.connection.PeerConnection;
import io.nem.xpx.facade.download.Download;
import io.nem.xpx.facade.download.DownloadParameter;
import io.nem.xpx.facade.download.DownloadResult;
import io.nem.xpx.factory.ConnectionFactory;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;

/**
 *
 * @author jsalinga
 */
public class mainFrame2 extends javax.swing.JFrame {

    private PeerConnection peerConnection;
    private final H2Utils sqlRunner = new H2Utils();
    private final Connection sqlConnection;
    private final TCTableModel tm;

    /**
     * Creates new form mainFrame2
     */
    public mainFrame2() {
        initComponents();
        sqlConnection = sqlRunner.getConnection();
        tm = (TCTableModel) jXTable1.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        btnExist = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jPopupMenu1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenu1PopupMenuWillBecomeVisible(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jMenuItem1.setText("jMenuItem1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Proxima-X - KeePass");

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel2.setLayout(new java.awt.BorderLayout());

        btnCreate.setText("Create Account");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnExist.setText("Close program");
        btnExist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExist)
                .addContainerGap())
        );

        jPanel2.add(jPanel3, java.awt.BorderLayout.EAST);

        jXTable1.setModel(new TCTableModel(new String[]{
            "NEM Address", "Private Key", "Public Key","NEM Hash"
        }));
        jXTable1.setToolTipText("Right-click to activate menu...");
        jXTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jXTable1.setColumnControlVisible(true);
        jXTable1.setComponentPopupMenu(jPopupMenu1);
        jScrollPane2.setViewportView(jXTable1);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel2);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jSplitPane1.setRightComponent(jScrollPane1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExistActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExistActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        CreateNewAddress dialog = new CreateNewAddress(this, true);
        dialog.setVisible(true);
        if (dialog.getReturnStatus() == CreateNewAddress.RET_OK) {
            ArrayList alist = dialog.getXpxKeepassRecord();
            String nem_address = (String) alist.get(0);
            String private_key = (String) alist.get(1);
            String public_key = (String) alist.get(2);
            String nem_hash = (String) alist.get(3);

            String sqlCmd = "INSERT INTO xpx_keepass (nem_address, "
                    + "private_key, public_key, nem_hash) VALUES ('"
                    + nem_address + "', '" + private_key + "', '"
                    + public_key + "', "
                    + "'" + nem_hash + "');";
            if (sqlRunner.suWrite(sqlCmd, sqlConnection)) {
                tm.insertRow(alist);
                jXTable1.packAll();
            }
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void jPopupMenu1PopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenu1PopupMenuWillBecomeVisible
        int idx = jXTable1.getSelectedRow();
        if (idx > -1) {
            jMenuItem1.setText("Download selected KeePass Database using NEM Hash");
            jMenuItem1.setEnabled(true);
        } else {
            jMenuItem1.setText("Please select item from the list...");
            jMenuItem1.setEnabled(false);
        }
    }//GEN-LAST:event_jPopupMenu1PopupMenuWillBecomeVisible

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int idx = jXTable1.getSelectedRow();
        ArrayList alist = tm.getRow(idx);
        final String nem_address = String.valueOf(alist.get(0)).trim();
        final String private_key = String.valueOf(alist.get(1)).trim();
        final String public_key = String.valueOf(alist.get(2)).trim();
        final String nem_hash = String.valueOf(alist.get(3)).trim();
        SwingWorker w = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                jTextArea1.setText("Checking LocalHttpPeerConnection...\n");
                if (peerConnection == null) {
                    try {
                        jTextArea1.append("Not connected!\n"
                                + "Creating LocalHttpPeerConnection object...\n");
                        peerConnection = new LocalHttpPeerConnection(
                                ConnectionFactory.createNemNodeConnection("testnet", "http", "104.128.226.60", 7890),
                                ConnectionFactory.createIPFSNodeConnection("/ip4/127.0.0.1/tcp/5001"));
                    } catch (Exception e) {
                        jTextArea1.append(e.getMessage() + "\n");
                        JOptionPane.showMessageDialog(rootPane, "<html>An error occured "
                                + "while executing <font color='red'><b>LocalHttpPeerConnection</b>"
                                + "</font color><br><br><b>" + e.getMessage());
                    }
                }
                if (peerConnection != null) {
                    jTextArea1.append("Creating Download object...\n");
                    final Download download = new Download(peerConnection);
                    try {
                        jTextArea1.append("Setting parameters for DownloadBinaryResult object...\n");
                        DownloadResult result = download.downloadBinary(DownloadParameter.create()
                                .nemHash(nem_hash)
                                .securedWithNemKeysPrivacyStrategy(private_key, public_key)
                                .build());

                        byte[] b = result.getData();

                        jTextArea1.append("Getting " + "kp_" + private_key + ".kdbx\n");

                        File kdbx = new File("tmp" + File.separator + "kp_" + private_key + ".kdbx");
                        try (FileOutputStream fos = new FileOutputStream(kdbx)) {
                            fos.write(b);
                        }

                        jTextArea1.setText("Loading KeePass Database: "
                                + private_key + ".kdbx\n");
                        //
                        KeePassFile database = KeePassDatabase.getInstance(kdbx).openDatabase("none");

                        // Retrieve all entries
                        List<Entry> entries = database.getEntries();
                        entries.stream().forEach((entry) -> {
                            jTextArea1.append("User Name:" + entry.getUsername() + "\n");
                            jTextArea1.append("Password:" + entry.getPassword() + "\n");
                        });
                    } catch (Exception ex) {
                        Logger.getLogger(mainFrame2.class.getName()).log(Level.SEVERE, null, ex);
                        jTextArea1.setText(ex.getMessage());
                        JOptionPane.showMessageDialog(rootPane, "<html>An error occured: "
                                + "<font color='red'><b>" + ex.toString() + "</b>"
                                + "</font color><br><br><b>" + ex.getMessage());
                    }

                }
                return null;
            }
        };
        w.execute();

    }//GEN-LAST:event_jMenuItem1ActionPerformed
    private void loadNemAccounts() {
        tm.clearTable();
        String sqlCmd = "SELECT * FROM xpx_keepass;";
        ResultSet sqlResult = sqlRunner.suQuery(sqlCmd, sqlConnection);
        if (sqlResult != null) {
            try {
                while (sqlResult.next()) {
                    ArrayList alist = new ArrayList();
                    String nem_address = String.valueOf(sqlResult.getString("nem_address"));
                    String private_key = String.valueOf(sqlResult.getString("private_key"));
                    String public_key = String.valueOf(sqlResult.getString("public_key"));
                    String nem_hash = String.valueOf(sqlResult.getString("nem_hash"));
                    alist.add(nem_address);
                    alist.add(private_key);
                    alist.add(public_key);
                    alist.add(nem_hash);
                    tm.insertRow(alist);
                }
                jXTable1.packAll();
            } catch (SQLException ex) {
                Logger.getLogger(mainFrame2.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        mainFrame2 frame = new mainFrame2();
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        if (frame.isInit()) {
            frame.setVisible(true);
        }
    }

    private boolean isInit() {
        boolean retVal = sqlRunner.initDB(sqlConnection);
        if (retVal) {
            jXTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            jSplitPane1.setDividerLocation(getHeight() / 2);
            loadNemAccounts();
        }
        return retVal;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnExist;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private org.jdesktop.swingx.JXTable jXTable1;
    // End of variables declaration//GEN-END:variables
}
